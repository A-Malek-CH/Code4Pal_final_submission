openapi: 3.0.3
info:
  title: 4PAL Backend API
  description: Authentication and user management API for the 4PAL platform
  version: 1.0.0
  contact:
    name: 4PAL Development Team

servers:
  - url: http://localhost:5000/api
    description: Development server

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          example: 1
        email:
          type: string
          format: email
          example: "user@example.com"
        first_name:
          type: string
          example: "John"
        last_name:
          type: string
          example: "Doe"
        phone_number:
          type: string
          nullable: true
          example: "+1234567890"
        user_type:
          type: string
          enum: [anonymous, registered, contributor, organization, admin]
          example: "registered"
        is_email_verified:
          type: boolean
          example: false
        is_phone_verified:
          type: boolean
          example: false
        preferred_language:
          type: string
          example: "en"
        registration_date:
          type: string
          format: date-time
          example: "2025-09-16T00:03:24.157588"
        created_at:
          type: string
          format: date-time
          example: "2025-09-16T00:03:24.157588"

    Contributor:
      type: object
      properties:
        id:
          type: integer
          example: 1
        user_id:
          type: integer
          example: 2
        contributor_type:
          type: string
          enum: [individual, organization]
          example: "individual"
        verification_status:
          type: string
          enum: [pending, approved, rejected, suspended]
          example: "pending"
        verified:
          type: boolean
          example: false
        motivation:
          type: string
          example: "I want to help my community"
        created_at:
          type: string
          format: date-time
          example: "2025-09-16T00:03:25.393452"

    AuthResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          nullable: true
          example: null
        data:
          type: object
          properties:
            access_token:
              type: string
              example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
            refresh_token:
              type: string
              example: "ADDpTOP6zo6zopiQonNtvWbftZmRZ1Oi..."
            token_type:
              type: string
              example: "Bearer"
            user:
              $ref: '#/components/schemas/User'

    ContributorAuthResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          nullable: true
          example: null
        data:
          type: object
          properties:
            access_token:
              type: string
              example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
            refresh_token:
              type: string
              example: "ls40vkKvS_D5P9I6ELDkMT0fsh9YaqH4..."
            token_type:
              type: string
              example: "Bearer"
            user:
              $ref: '#/components/schemas/User'
            contributor:
              $ref: '#/components/schemas/Contributor'

    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          example: "Error message"

    SuccessResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          nullable: true
          example: null
        data:
          type: object

paths:
  /auth/register/user:
    post:
      tags:
        - Authentication
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: "user@example.com"
                password:
                  type: string
                  minLength: 8
                  example: "securepassword123"
                first_name:
                  type: string
                  example: "John"
                last_name:
                  type: string
                  example: "Doe"
                phone_number:
                  type: string
                  example: "+1234567890"
                preferred_language:
                  type: string
                  example: "en"
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: User already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/register/contributor:
    post:
      tags:
        - Authentication
      summary: Register a new contributor
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
                - contributor_type
              properties:
                email:
                  type: string
                  format: email
                  example: "contributor@example.com"
                password:
                  type: string
                  minLength: 8
                  example: "securepassword123"
                first_name:
                  type: string
                  example: "Jane"
                last_name:
                  type: string
                  example: "Smith"
                contributor_type:
                  type: string
                  enum: [individual, organization]
                  example: "individual"
                motivation:
                  type: string
                  example: "I want to help my community"
      responses:
        '201':
          description: Contributor registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContributorAuthResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/login/user:
    post:
      tags:
        - Authentication
      summary: User login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: "user@example.com"
                password:
                  type: string
                  example: "securepassword123"
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/login/contributor:
    post:
      tags:
        - Authentication
      summary: Contributor login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: "contributor@example.com"
                password:
                  type: string
                  example: "securepassword123"
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContributorAuthResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Account not verified
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/refresh:
    post:
      tags:
        - Authentication
      summary: Refresh access token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - refresh_token
              properties:
                refresh_token:
                  type: string
                  example: "your-refresh-token-here"
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    nullable: true
                    example: null
                  data:
                    type: object
                    properties:
                      access_token:
                        type: string
                        example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                      token_type:
                        type: string
                        example: "Bearer"
        '401':
          description: Invalid refresh token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/logout:
    post:
      tags:
        - Authentication
      summary: Logout user
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - refresh_token
              properties:
                refresh_token:
                  type: string
                  example: "your-refresh-token-here"
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/me:
    get:
      tags:
        - Authentication
      summary: Get current user info
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Current user info
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    properties:
                      success:
                        type: boolean
                        example: true
                      message:
                        type: string
                        nullable: true
                        example: null
                      data:
                        type: object
                        properties:
                          user:
                            $ref: '#/components/schemas/User'
                  - type: object
                    properties:
                      success:
                        type: boolean
                        example: true
                      message:
                        type: string
                        nullable: true
                        example: null
                      data:
                        type: object
                        properties:
                          user:
                            $ref: '#/components/schemas/User'
                          contributor:
                            $ref: '#/components/schemas/Contributor'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/change-password:
    post:
      tags:
        - Authentication
      summary: Change password
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - current_password
                - new_password
              properties:
                current_password:
                  type: string
                  example: "oldpassword123"
                new_password:
                  type: string
                  minLength: 8
                  example: "newpassword456"
      responses:
        '200':
          description: Password changed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          description: Invalid current password or unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users:
    get:
      tags:
        - Users
      summary: List all users
      security:
        - BearerAuth: []
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    nullable: true
                    example: null
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/{user_id}:
    get:
      tags:
        - Users
      summary: Get user by ID
      security:
        - BearerAuth: []
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    nullable: true
                    example: null
                  data:
                    $ref: '#/components/schemas/User'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      tags:
        - Users
      summary: Update user (own profile only)
      security:
        - BearerAuth: []
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                first_name:
                  type: string
                  example: "John Updated"
                last_name:
                  type: string
                  example: "Doe Updated"
                phone_number:
                  type: string
                  example: "+9876543210"
                preferred_language:
                  type: string
                  example: "fr"
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    nullable: true
                    example: null
                  data:
                    $ref: '#/components/schemas/User'
        '403':
          description: Unauthorized to update this user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      tags:
        - Users
      summary: Delete user (own profile only)
      security:
        - BearerAuth: []
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: User deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '403':
          description: Unauthorized to delete this user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /contributors:
    get:
      tags:
        - Contributors
      summary: List all contributors
      security:
        - BearerAuth: []
      responses:
        '200':
          description: List of contributors
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    nullable: true
                    example: null
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Contributor'

  /contributors/{contributor_id}:
    get:
      tags:
        - Contributors
      summary: Get contributor by ID
      security:
        - BearerAuth: []
      parameters:
        - name: contributor_id
          in: path
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Contributor details
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    nullable: true
                    example: null
                  data:
                    $ref: '#/components/schemas/Contributor'

    put:
      tags:
        - Contributors
      summary: Update contributor (own profile only)
      security:
        - BearerAuth: []
      parameters:
        - name: contributor_id
          in: path
          required: true
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                motivation:
                  type: string
                  example: "Updated motivation text"
                contributor_type:
                  type: string
                  enum: [individual, organization]
                  example: "organization"
      responses:
        '200':
          description: Contributor updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    nullable: true
                    example: null
                  data:
                    $ref: '#/components/schemas/Contributor'

    delete:
      tags:
        - Contributors
      summary: Delete contributor (own profile only)
      security:
        - BearerAuth: []
      parameters:
        - name: contributor_id
          in: path
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Contributor deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'